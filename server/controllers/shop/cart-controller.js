
const Cart = require("../../models/Cart")
const Product = require("../../models/Product")



const addToCart = async (req, res) => {
    try {

        const { userId, productId, quantity } = req.body


        if (!userId || !productId || quantity <= 0) {
            return res.status(400).json({
                success: false,
                message: "Th√¥ng tin s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá"
            })
        }

        const product = await Product.findById(productId)
        if (!product) {
            return res.status(404).json({
                success: false,
                message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i "
            })
        }


        let cart = await Cart.findOne({ userId })
        if (!cart) {
            cart = new Cart({ userId, items: [] })
        }

        const findCurrentProductIndex = cart.items.findIndex(item => item.productId.toString() === productId)

        if (findCurrentProductIndex === -1) {
            cart.items.push({ productId, quantity })
        } else {
            cart.items[findCurrentProductIndex].quantity += quantity
        }
        await cart.save()
        res.status(200).json({
            success: true,
            message: "Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng",
            data: cart
        })

    } catch (error) {
        console.log("üöÄ ~ addCart ~ error:", error)
        res.status(500).json({
            success: false,
            message: "kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m"
        })

    }
}


// fetch product cart 

const fetchCart = async (req, res) => {
    try {
        const { userId } = req.params;
        if (!userId) {
            return res.status(400).json({
                success: false,
                message: "Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"
            })
        }
        const cart = await Cart.findOne({ userId }).populate({
            path: "items.productId",
            select: "image title price salePrice"
        })

        if (!cart) {
            return res.status(404).json({
                success: false,
                message: "Gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"
            })
        }

        const validItems = cart.items.filter(productItem => productItem.productId);
        if (validItems.length < cart.items.length) {
            cart.items = validItems;
            await cart.save()
        }

        const populateCartItems = validItems.map(item => ({
            productId: item.productId._id,
            image: item.productId.image,
            title: item.productId.title,
            price: item.productId.price,
            salePrice: item.productId.salePrice,
            quantity: item.quantity
        }))

        res.status(200).json({
            success: true,
            data: {
                ...cart._doc,
                items: populateCartItems
            }
        })


    } catch (error) {
        console.log("üöÄ ~ addCart ~ error:", error)
        res.status(500).json({
            success: false,
            message: "kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m"
        })

    }
}

//update product cart

const updateCart = async (req, res) => {
    try {
        const { userId, productId, quantity } = req.body


        if (!userId || !productId || quantity <= 0) {
            return res.status(400).json({
                success: false,
                message: "Th√¥ng tin s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá"
            })
        }

        const cart = await Cart.findOne({ userId })
        if (!cart) {
            return res.status(404).json({
                success: false,
                message: "Gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"
            })
        }

        const findCurrentProductIndex = cart.items.findIndex(item => item.productId.toString() === productId)
        if (findCurrentProductIndex === -1) {
            return res.status(404).json({
                success: false,
                message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong giÔøΩÔøΩ h√†ng c·ªßa b·∫°n"
            })
        }

        cart.items[findCurrentProductIndex].quantity = quantity;
        await cart.save();

        await cart.populate({
            path: "items.productId",
            select: "image title price salePrice"
        })
        const populateCartItems = cart.items.map(item => ({
            productId: item.productId ? item.productId._id : null,
            image: item.productId ? item.productId.image : null,
            title: item.productId ? item.productId.title : "Product not found",
            price: item.productId ? item.productId.price : null,
            salePrice: item.productId ? item.productId.salePrice : null,
            quantity: item.productId ? item.quantity : null
        }))

        res.status(200).json({
            success: true,
            data: {
                ...cart._doc,
                items: populateCartItems
            }
        })

    } catch (error) {
        console.log("üöÄ ~ addCart ~ error:", error)
        res.status(500).json({
            success: false,
            message: "kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m"
        })

    }
}


// delete product cart

const deleteCart = async (req, res) => {
    try {
        const { userId, productId } = req.params;

        if (!userId || !productId) {
            return res.status(404).json({
                success: false,
                message: "Th√¥ng tin s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá"
            });
        }

        const cart = await Cart.findOne({ userId }).populate({
            path: "items.productId",
            select: "image title price salePrice"
        });

        if (!cart) {
            return res.status(404).json({
                success: false,
                message: "Gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"
            });
        }

        // L·ªçc s·∫£n ph·∫©m mu·ªën x√≥a
        cart.items = cart.items.filter(item => item.productId._id.toString() !== productId);

        // N·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng, x√≥a gi·ªè h√†ng
        if (cart.items.length === 0) {
            await Cart.deleteOne({ userId });
            return res.status(200).json({
                success: true,
                message: "Gi·ªè h√†ng c·ªßa b·∫°n ƒë√£ tr·ªëng v√† ƒë√£ b·ªã x√≥a."
            });
        }

        // L∆∞u gi·ªè h√†ng sau khi x√≥a s·∫£n ph·∫©m
        await cart.save();
        await cart.populate({
            path: "items.productId",
            select: "image title price salePrice"
        });

        const populateCartItems = cart.items.map(item => ({
            productId: item.productId ? item.productId._id : null,
            image: item.productId ? item.productId.image : null,
            title: item.productId ? item.productId.title : "Product not found",
            price: item.productId ? item.productId.price : null,
            salePrice: item.productId ? item.productId.salePrice : null,
            quantity: item.quantity
        }));

        res.status(200).json({
            success: true,
            data: {
                ...cart._doc,
                items: populateCartItems
            }
        });
    } catch (error) {
        console.log("üöÄ ~ deleteCart ~ error:", error);
        res.status(500).json({
            success: false,
            message: "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng."
        });
    }
};

module.exports = { addToCart, fetchCart, deleteCart, updateCart }