
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../../models/User');


//register
const registerUser = async (req, res) => {

    const { userName, email, password } = req.body;
    try {
        const checkUser = await User.findOne({ email });
        if (checkUser) {
            return res.json({
                success: false,
                message: "Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i",
            })
        }
        const hashPassword = await bcrypt.hash(password, 12);
        const newUser = new User({
            userName,
            email,
            password: hashPassword,
        })
        await newUser.save();
        res.status(201).json({
            success: true,
            message: "ƒêƒÉng k√Ω th√†nh c√¥ng"
        })
    } catch (e) {
        res.status(500).json({
            success: false,
            message: "ƒêƒÉng k√Ω th·∫•t b·∫°i"
        })

    }
}


//login
const loginUser = async (req, res) => {

    const { email, password } = req.body;
    try {
        const checkUser = await User.findOne({ email });
        if (!checkUser) {
            return res.json({
                success: false,
                message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
                // email, password

            })
        }

        const checkPassWord = await bcrypt.compare(password, checkUser.password)
        if (!checkPassWord) {
            return res.json({
                success: false,
                message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
                // email, password
            })
        };
        // t·∫°o token 
        const token = jwt.sign({
            id: checkUser._id,
            role: checkUser.role,
            email: checkUser.email,
            userName: checkUser.userName


        }, 'CLIENT_SECRET_KEY', { expiresIn: '1h' });


        // g·ª≠i token v·ªÅ cookie xong ƒë·∫øn ph·∫ßn x·ª≠ l√Ω c·ªßa redux 
        res.cookie('token', token, { httpOnly: true, secure: false }).json({
            success: true,
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            user: {
                email: checkUser.email,
                role: checkUser.role,
                id: checkUser._id,
                userName: checkUser.userName
            },
        });

    } catch (e) {
        console.log("üöÄ ~ login ~ e:", e)
        res.status(500).json({
            success: false,
            message: " ƒêƒÉng nh·∫≠p th·∫•t b·∫°i "
        })

    }
}



//logout

const logoutUser = (req, res) => {
    res.clearCookie('token').json({
        success: true,
        message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng"
    });

}

//auth middleware

const authMiddleWare = (req, res, next) => {
    const token = req.cookies.token;    // l·∫•y token ra t·ª´ cookie
    if (!token) {
        return res.status(401).json({
            success: false,
            message: " Unauthorised user"
        })
    }
    try {
        const decoded = jwt.verify(token, 'CLIENT_SECRET_KEY');  // n·∫øu c√≥ token th√¨ s·∫Ω d√πng verify ƒë·ªÉ x√°c minh token m√† gi·∫£i m√£ ƒëo·∫°n token b·∫±ng 'CLIENT_SECRECT_KEY
        req.user = decoded;
        next();   // d√πng ƒë·ªÉ chuy·ªÉn t·ªõi c√°c h√†m x·ª≠ l√Ω ch√≠nh l√† ·ªü auth-router
    } catch (error) {
        return res.status(401).json({
            success: false,
            message: "Token h·∫øt h·∫°n"
        })
    }
}



module.exports = { registerUser, loginUser, logoutUser, authMiddleWare }